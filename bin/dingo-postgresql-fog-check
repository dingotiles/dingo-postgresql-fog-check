#!/usr/bin/env ruby

require "yaml"
require "fog"

if ARGV.size == 0
  $stderr.puts "USAGE: dingo-postgresql-fog-check [path/to/fog.yml]"
  exit 1
end

def display_sanitized_credentials(fog_credentials)
  creds = fog_credentials.clone
  creds.keys.each do |key|
    if key =~ /(password|secret)/
      creds[key] = "REDACTED"
    end
  end
  p creds
end

def check_bucket_exists_in_region(bucket_name, region, fog_credentials)
  creds = fog_credentials.clone
  creds.delete(:bucket_name)
  creds.delete(:endpoint)
  region = creds[:region] || "us-east-1"
  storage = Fog::Storage.new(creds)
  begin
    bucket = storage.directories.get(bucket_name)
  rescue Excon::Error::Socket => e
    $stderr.puts "ERROR: Unknown region '#{region}'"
    exit 1
  rescue ArgumentError => e
    $stderr.puts e
    exit 1
  end
end

def extract_region_from_endpoint(endpoint)
  return "us-east-1" if endpoint == "s3.amazonaws.com"
  return "cn-north-1" if endpoint == "s3.cn-north-1.amazonaws.com.cn"
  if endpoint =~ /s3-(.*).amazonaws.com/
    return $1
  end
  $stderr.puts "Endpoint '#{endpoint}' does not pattern match to s3-<region>.amazonaws.com"
  exit 1
end

def check_region_matches_endpoint(region, endpoint)
  endpoint_region = extract_region_from_endpoint(endpoint)
  if endpoint_region != region
    $stderr.puts "Region '#{region}' does not match endpoint '#{endpoint}'"
    exit 1
  end
end

ARGV.each do |fog_file|
  unless fog_config = YAML.load_file(fog_file)
    $stderr.puts "File #{fog_file} could not be found or YAML parsed"
    exit 1
  end
  fog_credentials = fog_config['default'] || fog_config[:default]
  fog_credentials = fog_credentials.inject({}) { |memo, (k, v)| memo[k.to_sym] = v; memo  }
  if fog_credentials.nil?
    $stderr.puts "File #{fog_file} does not have a :default key"
    exit 1
  end

  provider = fog_credentials[:provider]
  if provider.nil?
    $stderr.puts "default.provider missing; defaulting to 'AWS'"
    fog_credentials[:provider] = provider = "AWS"
  end

  if provider != "AWS"
    $stderr.puts "Dingo PostgreSQL does not yet support any Object Store other than Amazon S3 ('AWS'). Please contact https://slack.dingotiles.com to discuss your requirements."
    exit 1
  end

  display_sanitized_credentials fog_credentials

  bucket_name = fog_credentials.delete(:bucket_name)
  region = fog_credentials[:region]
  endpoint = fog_credentials.delete(:endpoint)
  if region.nil?
    if endpoint.nil?
      $stderr.puts "ERROR: require default.region or default.endpoint"
      exit 1
    end
    region = extract_region_from_endpoint(endpoint)
    fog_credentials[:region] = region
  elsif !endpoint.nil?
    check_region_matches_endpoint(region, endpoint)
  end
  check_bucket_exists_in_region(bucket_name, region, fog_credentials)

  # Final clarification that original credentials are good
  storage = Fog::Storage.new(fog_credentials)
  p storage.directories.get(bucket_name)
end
